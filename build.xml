<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- WARNING: Eclipse auto-generated file.
              Any modifications will be overwritten.
              To include a user specific buildfile here, simply create one in the same
              directory with the processing instruction <?eclipse.ant.import?>
              as the first entry and export the buildfile again. --><project basedir="." default="build" name="Unit Testing">
    <property environment="env"/>
    <property name="junit.output.dir" value="junit"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.7"/>
    <property name="source" value="1.7"/>
    < property  name = " junit.build.dir "  value = " junitClasses "  /> 
    < property  name = " junit.report.dir "  value = " junitReport "  />
    <path id="JUnit 4.libraryclasspath">
        <pathelement location="../../../../../eclipse java/plugins/org.junit_4.11.0.v201303080030/junit.jar"/>
        <pathelement location="../../../../../eclipse java/plugins/org.hamcrest.core_1.3.0.v201303031735.jar"/>
    </path>
    <path id="Unit Testing.classpath">
        <pathelement location="bin"/>
        <path refid="JUnit 4.libraryclasspath"/>
    </path>
    <target name="init">
        <mkdir dir="bin"/>
        < mkdir  dir = " $ {junit.build.dir} "  /> 
        < mkdir  dir = " $ {junit.report.dir} "  />
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="src">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>
    <target name="clean">
        <delete dir="bin"/>
        < delete  failonerror = " false "  dir = " ${junit.build.dir} "  /> 
        < delete  failonerror = " false "  dir = " ${junit.report.dir} "  />
    </target>
    <target depends="clean" name="cleanall"/>
    <target depends="build-subprojects,build-project" name="build"/>
    <target name="build-subprojects"/>
    <target depends="init" name="build-project">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" includeantruntime="false" source="${source}" target="${target}">
            <src path="src"/>
            <classpath refid="Unit Testing.classpath"/>
        </javac>
    </target>
    <target description="Build all projects which reference this project. Useful to propagate changes." name="build-refprojects"/>
    <target description="copy Eclipse compiler jars to ant lib directory" name="init-eclipse-compiler">
        <copy todir="${ant.library.dir}">
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </copy>
        <unzip dest="${ant.library.dir}">
            <patternset includes="jdtCompilerAdapter.jar"/>
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </unzip>
    </target>
    <target description="compile project with Eclipse compiler" name="build-eclipse-compiler">
        <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
        <antcall target="build"/>
    </target>
    <target name="GoodTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="GoodTest" todir="${junit.output.dir}"/>
            <classpath refid="Unit Testing.classpath"/>
        </junit>
    </target>
    <target name="HelloWorldTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="HelloWorldTest" todir="${junit.output.dir}"/>
            <classpath refid="Unit Testing.classpath"/>
        </junit>
    </target>
    <target name="junitreport">
        <junitreport todir="${junit.output.dir}">
            <fileset dir="${junit.output.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${junit.output.dir}"/>
        </junitreport>
    </target>
    < target  name = " junit "  depends = " init " > 
        < javac 
                encoding = " ISO-8859-1 " 
                destdir = " ${junit.build.dir} " 
                classpathref = " lib.jarfiles " 
                debug = " on " 
                deprecation = " on " 
                optimize = " on " > 
            < src  path = " ${src.dir} "  /> 
            < src  path = " ${test.dir} "  /> 
        </ javac >
        < junit  fork = " no "  printsummary = " no "  haltonfailure = " no "  showoutput = " true "  filtertrace = " false " > 
        < classpath  refid = " lib.jarfiles "  /> 
        < classpath > 
                    < pathelement  path = " ${java.class.path} "  /> 
            < pathelement  path = " ${junit.build.dir} "  /> 
        </ classpath >
        < batchtest  todir = " ${junit.report.dir} " > 
            < fileset  dir = " ${junit.build.dir} " > 
                < include  name = " GoodTest.class "  /> 
            </ fileset > 
            < formatter  type = " xml "  /> 
        </ batchtest > 
    </ junit > 
    </ target >
</project>
